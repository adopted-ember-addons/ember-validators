{"version":3,"file":"confirmation.js","sources":["../src/confirmation.ts"],"sourcesContent":["import { get } from '@ember/object';\nimport { assert } from '@ember/debug';\nimport { isPresent, isEmpty, isEqual } from '@ember/utils';\nimport validationError, {\n  type IValidationError,\n} from './utils/validation-error.ts';\n\ninterface IOptions {\n  on: string;\n  allowBlank?: boolean;\n}\n\n/**\n *  @class Confirmation\n *  @module Validators\n */\n\n/**\n * @method validate\n * @param {Any} value\n * @param {Object} options\n * @param {String} options.on The attribute to confirm against\n * @param {String} options.allowBlank If true, skips validation if the value is empty\n * @param {Object} model\n * @param {String} attribute\n */\nexport default function validateConfirmation(\n  value: unknown,\n  options: IOptions,\n  model: object,\n  attribute: string,\n): true | IValidationError<unknown, IOptions> {\n  const on = options.on;\n  const allowBlank = options.allowBlank;\n\n  assert(\n    `[validator:confirmation] [${attribute}] option 'on' is required`,\n    isPresent(on),\n  );\n\n  if (allowBlank && isEmpty(value)) {\n    return true;\n  }\n\n  if (!isEqual(value, get(model, on))) {\n    return validationError('confirmation', value, options);\n  }\n\n  return true;\n}\n"],"names":["validateConfirmation","value","options","model","attribute","on","allowBlank","assert","isPresent","isEmpty","isEqual","get","validationError"],"mappings":";;;;;AAYA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,oBAAoBA,CAC1CC,KAAc,EACdC,OAAiB,EACjBC,KAAa,EACbC,SAAiB,EAC2B;AAC5C,EAAA,MAAMC,EAAE,GAAGH,OAAO,CAACG,EAAE;AACrB,EAAA,MAAMC,UAAU,GAAGJ,OAAO,CAACI,UAAU;EAErCC,MAAM,CACJ,6BAA6BH,SAAS,CAAA,yBAAA,CAA2B,EACjEI,SAAS,CAACH,EAAE,CACd,CAAC;AAED,EAAA,IAAIC,UAAU,IAAIG,OAAO,CAACR,KAAK,CAAC,EAAE;AAChC,IAAA,OAAO,IAAI;AACb;AAEA,EAAA,IAAI,CAACS,OAAO,CAACT,KAAK,EAAEU,GAAG,CAACR,KAAK,EAAEE,EAAE,CAAC,CAAC,EAAE;AACnC,IAAA,OAAOO,eAAe,CAAC,cAAc,EAAEX,KAAK,EAAEC,OAAO,CAAC;AACxD;AAEA,EAAA,OAAO,IAAI;AACb;;;;"}