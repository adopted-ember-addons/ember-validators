{"version":3,"file":"length.js","sources":["../src/length.ts"],"sourcesContent":["import { isEmpty, isNone } from '@ember/utils';\nimport validationError, {\n  type IValidationError,\n} from './utils/validation-error.ts';\n\ntype IOptions = {\n  allowBlank?: boolean;\n  allowNone?: boolean;\n  useBetweenMessage?: boolean;\n  is?: number;\n  min?: number;\n  max?: number;\n};\n\n/**\n *  @class Length\n *  @module Validators\n */\n\n/**\n * @method validate\n * @param {Any} value\n * @param {Object} options\n * @param {Boolean} options.allowNone If true, skips validation if the value is null or undefined. __Default: true__\n * @param {Boolean} options.allowBlank If true, skips validation if the value is empty\n * @param {Boolean} options.useBetweenMessage If true, uses the between error message when `max` and `min` are both set\n * @param {Number} options.is The exact length the value can be\n * @param {Number} options.min The minimum length the value can be\n * @param {Number} options.max The maximum length the value can be\n * @param {Object} model\n * @param {String} attribute\n */\nexport default function validateLength(\n  value: string,\n  options: IOptions,\n): true | IValidationError<string, IOptions> {\n  const {\n    allowNone = true,\n    allowBlank,\n    useBetweenMessage,\n    is,\n    min,\n    max,\n  } = options;\n\n  if (isNone(value)) {\n    return allowNone ? true : validationError('invalid', value, options);\n  }\n\n  if (allowBlank && isEmpty(value)) {\n    return true;\n  }\n\n  const length = value.length;\n\n  if (!isNone(is) && is !== length) {\n    return validationError('wrongLength', value, options);\n  }\n\n  if (\n    useBetweenMessage &&\n    !isNone(min) &&\n    !isNone(max) &&\n    (length < min || length > max)\n  ) {\n    return validationError('between', value, options);\n  }\n\n  if (!isNone(min) && min > length) {\n    return validationError('tooShort', value, options);\n  }\n\n  if (!isNone(max) && max < length) {\n    return validationError('tooLong', value, options);\n  }\n\n  return true;\n}\n"],"names":["validateLength","value","options","allowNone","allowBlank","useBetweenMessage","is","min","max","isNone","validationError","isEmpty","length"],"mappings":";;;AAcA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,cAAcA,CACpCC,KAAa,EACbC,OAAiB,EAC0B;EAC3C,MAAM;AACJC,IAAAA,SAAS,GAAG,IAAI;IAChBC,UAAU;IACVC,iBAAiB;IACjBC,EAAE;IACFC,GAAG;AACHC,IAAAA;AACF,GAAC,GAAGN,OAAO;AAEX,EAAA,IAAIO,MAAM,CAACR,KAAK,CAAC,EAAE;IACjB,OAAOE,SAAS,GAAG,IAAI,GAAGO,eAAe,CAAC,SAAS,EAAET,KAAK,EAAEC,OAAO,CAAC;AACtE;AAEA,EAAA,IAAIE,UAAU,IAAIO,OAAO,CAACV,KAAK,CAAC,EAAE;AAChC,IAAA,OAAO,IAAI;AACb;AAEA,EAAA,MAAMW,MAAM,GAAGX,KAAK,CAACW,MAAM;EAE3B,IAAI,CAACH,MAAM,CAACH,EAAE,CAAC,IAAIA,EAAE,KAAKM,MAAM,EAAE;AAChC,IAAA,OAAOF,eAAe,CAAC,aAAa,EAAET,KAAK,EAAEC,OAAO,CAAC;AACvD;EAEA,IACEG,iBAAiB,IACjB,CAACI,MAAM,CAACF,GAAG,CAAC,IACZ,CAACE,MAAM,CAACD,GAAG,CAAC,KACXI,MAAM,GAAGL,GAAG,IAAIK,MAAM,GAAGJ,GAAG,CAAC,EAC9B;AACA,IAAA,OAAOE,eAAe,CAAC,SAAS,EAAET,KAAK,EAAEC,OAAO,CAAC;AACnD;EAEA,IAAI,CAACO,MAAM,CAACF,GAAG,CAAC,IAAIA,GAAG,GAAGK,MAAM,EAAE;AAChC,IAAA,OAAOF,eAAe,CAAC,UAAU,EAAET,KAAK,EAAEC,OAAO,CAAC;AACpD;EAEA,IAAI,CAACO,MAAM,CAACD,GAAG,CAAC,IAAIA,GAAG,GAAGI,MAAM,EAAE;AAChC,IAAA,OAAOF,eAAe,CAAC,SAAS,EAAET,KAAK,EAAEC,OAAO,CAAC;AACnD;AAEA,EAAA,OAAO,IAAI;AACb;;;;"}