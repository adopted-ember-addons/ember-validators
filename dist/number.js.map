{"version":3,"file":"number.js","sources":["../src/number.ts"],"sourcesContent":["import { isEmpty, isNone } from '@ember/utils';\nimport validationError, {\n  type IValidationError,\n} from './utils/validation-error.ts';\n\ntype IOptions = {\n  allowBlank?: boolean;\n  allowNone?: boolean;\n  allowString?: boolean;\n  integer?: boolean;\n  positive?: boolean;\n  odd?: boolean;\n  even?: boolean;\n  is?: number;\n  lt?: number;\n  lte?: number;\n  gt?: number;\n  gte?: number;\n  multipleOf?: number;\n};\n\n/**\n *  @class Number\n *  @module Validators\n */\n\n/**\n * @method validate\n * @param {Any} value\n * @param {Object} options\n * @param {Boolean} options.allowBlank If true, skips validation if the value is empty\n * @param {Boolean} options.allowNone If true, skips validation if the value is null or undefined. __Default: true__\n * @param {Boolean} options.allowString If true, validator will accept string representation of a number\n * @param {Boolean} options.integer Number must be an integer\n * @param {Boolean} options.positive Number must be greater than or equal to 0\n * @param {Boolean} options.odd Number must be odd\n * @param {Boolean} options.even Number must be even\n * @param {Number} options.is Number must be equal to this value\n * @param {Number} options.lt Number must be less than this value\n * @param {Number} options.lte Number must be less than or equal to this value\n * @param {Number} options.gt Number must be greater than this value\n * @param {Number} options.gte Number must be greater than or equal to this value\n * @param {Number} options.multipleOf Number must be a multiple of this value\n * @param {Object} model\n * @param {String} attribute\n */\nexport default function validateNumber(\n  value: string | number,\n  options: IOptions,\n): true | IValidationError<string | number, IOptions> {\n  const numValue = Number(value);\n  const optionKeys = Object.keys(options) as Array<keyof IOptions>;\n  const { allowBlank, allowNone = true, allowString, integer } = options;\n\n  if (allowNone && isNone(value)) {\n    return true;\n  }\n\n  if (allowBlank && isEmpty(value)) {\n    return true;\n  }\n\n  if (isEmpty(value)) {\n    return validationError('notANumber', value, options);\n  }\n\n  if (typeof value === 'string' && !allowString) {\n    return validationError('notANumber', value, options);\n  }\n\n  if (!isNumber(numValue)) {\n    return validationError('notANumber', value, options);\n  }\n\n  if (integer && !isInteger(numValue)) {\n    return validationError('notAnInteger', value, options);\n  }\n\n  for (const type of optionKeys) {\n    const returnValue = _validateType(type, options, numValue);\n\n    if (typeof returnValue !== 'boolean') {\n      return returnValue;\n    }\n  }\n\n  return true;\n}\n\nfunction _validateType(\n  type: keyof IOptions,\n  options: IOptions,\n  value: string | number,\n): true | IValidationError<string | number, IOptions> {\n  const expected = options[type];\n  const actual = value;\n\n  if (type === 'is' && actual !== expected) {\n    return validationError('equalTo', value, options);\n  } else if (type === 'lt' && actual >= expected!) {\n    return validationError('lessThan', value, options);\n  } else if (type === 'lte' && actual > expected!) {\n    return validationError('lessThanOrEqualTo', value, options);\n  } else if (type === 'gt' && actual <= expected!) {\n    return validationError('greaterThan', value, options);\n  } else if (type === 'gte' && actual < expected!) {\n    return validationError('greaterThanOrEqualTo', value, options);\n  } else if (type === 'positive' && (actual as number) < 0) {\n    return validationError('positive', value, options);\n  } else if (\n    type === 'odd' &&\n    (!isInteger(actual) || (actual as number) % 2 === 0)\n  ) {\n    return validationError('odd', value, options);\n  } else if (\n    type === 'even' &&\n    (!isInteger(actual) || (actual as number) % 2 !== 0)\n  ) {\n    return validationError('even', value, options);\n  } else if (\n    type === 'multipleOf' &&\n    !isInteger((actual as number) / (expected as number))\n  ) {\n    return validationError('multipleOf', value, options);\n  }\n\n  return true;\n}\n\n/*\n  Use polyfills instead of Number.isNaN or Number.isInteger to support IE & Safari\n */\n\nfunction isNumber(value: string | number): boolean {\n  return typeof value === 'number' && !isNaN(value);\n}\n\nfunction isInteger(value: string | number): boolean {\n  return (\n    typeof value === 'number' && isFinite(value) && Math.floor(value) === value\n  );\n}\n"],"names":["validateNumber","value","options","numValue","Number","optionKeys","Object","keys","allowBlank","allowNone","allowString","integer","isNone","isEmpty","validationError","isNumber","isInteger","type","returnValue","_validateType","expected","actual","isNaN","isFinite","Math","floor"],"mappings":"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"}