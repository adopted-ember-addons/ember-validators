{"version":3,"file":"format.js","sources":["../src/format.ts"],"sourcesContent":["/* eslint-disable no-useless-escape */\nimport { isEmpty, isNone } from '@ember/utils';\nimport { assert } from '@ember/debug';\n\nimport { canInvoke } from './utils/can-invoke.ts';\nimport validationError, {\n  type IValidationError,\n} from './utils/validation-error.ts';\n\ntype IEmailOptions = {\n  allowBlank?: boolean;\n  type?: 'email';\n  inverse?: boolean;\n  regex?: RegExp;\n  allowNonTld?: boolean;\n  minTldLength?: number;\n};\ntype IOptions =\n  | IEmailOptions\n  | {\n      allowBlank?: boolean;\n      type?: 'phone' | 'url';\n      inverse?: boolean;\n      regex?: RegExp;\n    };\n\n/**\n *  @class Format\n *  @module Validators\n */\n\n/**\n * @method validate\n * @param {Any} value\n * @param {Object} options\n * @param {Boolean} options.allowBlank If true, skips validation if the value is empty\n * @param {String} options.type Can be the one of the following options [`email`, `phone`, `url`]\n * @param {String} options.inverse If true, pass if the value doesn't match the given regex / type\n * @param {Regex} options.regex The regular expression to test against\n * @param {Boolean} options.allowNonTld If true, the predefined regular expression `email` allows non top-level domains\n * @param {Number} options.minTldLength The min length of the top-level domain on the predefined `email` regular expression\n * @param {Object} model\n * @param {String} attribute\n */\nexport const regularExpressions = {\n  email:\n    /^[a-z0-9!#$%&'*+\\/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+\\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,\n\n  phone:\n    /^([\\+]?1\\s*[-\\/\\.]?\\s*)?(\\((\\d{3})\\)|(\\d{3}))\\s*[-\\/\\.]?\\s*(\\d{3})\\s*[-\\/\\.]?\\s*(\\d{4})\\s*(([xX]|[eE][xX][tT]?[\\.]?|extension)\\s*([#*\\d]+))*$/,\n\n  url: /(?:([A-Za-z]+):)?(\\/{0,3})[a-zA-Z0-9][a-zA-Z-0-9]*(\\.[\\w-]+)+([\\w.,@?^=%&amp;:\\/~+#-{}]*[\\w@?^=%&amp;\\/~+#-{}])??/,\n} as const;\n\nexport default function validateFormat(\n  value: unknown,\n  options: IOptions,\n  model: object,\n  attribute: string,\n): true | IValidationError<unknown, IOptions> {\n  const { regex, type, inverse = false, allowBlank } = options;\n\n  assert(\n    `[validator:format] [${attribute}] no options were passed in`,\n    !isEmpty(Object.keys(options)),\n  );\n\n  let regexTest = regex;\n\n  if (allowBlank && isEmpty(value)) {\n    return true;\n  }\n\n  if (type && !regex && regularExpressions[type]) {\n    regexTest = regularExpressions[type];\n  }\n\n  if (type === 'email') {\n    if (regexTest === regularExpressions.email) {\n      regexTest = formatEmailRegex(options);\n    }\n    Object.assign({}, options, { regex: regexTest });\n  }\n\n  if (\n    !canInvoke(value, 'match') ||\n    (regexTest && isEmpty((value as string).match(regexTest)) !== inverse)\n  ) {\n    return validationError(\n      type || 'invalid',\n      value,\n      Object.assign({}, options, { regex: regexTest }),\n    );\n  }\n\n  return true;\n}\n\nfunction formatEmailRegex(options: IEmailOptions): RegExp {\n  let { source } = regularExpressions.email;\n  const { allowNonTld, minTldLength } = options;\n\n  if (!isNone(minTldLength) && typeof minTldLength === 'number') {\n    source = source.replace(\n      '[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$',\n      `[a-z0-9]{${minTldLength},}(?:[a-z0-9-]*[a-z0-9])?$`,\n    );\n  }\n\n  if (allowNonTld) {\n    source = source.replace(\n      '@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)',\n      '@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.?)',\n    );\n  }\n\n  return new RegExp(source, 'i');\n}\n"],"names":["regularExpressions","email","phone","url","validateFormat","value","options","model","attribute","regex","type","inverse","allowBlank","assert","isEmpty","Object","keys","regexTest","formatEmailRegex","assign","canInvoke","match","validationError","source","allowNonTld","minTldLength","isNone","replace","RegExp"],"mappings":";;;;;AAAA;AA0BA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,kBAAkB,GAAG;AAChCC,EAAAA,KAAK,EACH,4IAA4I;AAE9IC,EAAAA,KAAK,EACH,+IAA+I;AAEjJC,EAAAA,GAAG,EAAE;AACP;AAEe,SAASC,cAAcA,CACpCC,KAAc,EACdC,OAAiB,EACjBC,KAAa,EACbC,SAAiB,EAC2B;EAC5C,MAAM;IAAEC,KAAK;IAAEC,IAAI;AAAEC,IAAAA,OAAO,GAAG,KAAK;AAAEC,IAAAA;AAAW,GAAC,GAAGN,OAAO;AAE5DO,EAAAA,MAAM,CACJ,CAAA,oBAAA,EAAuBL,SAAS,CAAA,2BAAA,CAA6B,EAC7D,CAACM,OAAO,CAACC,MAAM,CAACC,IAAI,CAACV,OAAO,CAAC,CAC/B,CAAC;EAED,IAAIW,SAAS,GAAGR,KAAK;AAErB,EAAA,IAAIG,UAAU,IAAIE,OAAO,CAACT,KAAK,CAAC,EAAE;AAChC,IAAA,OAAO,IAAI;AACb;EAEA,IAAIK,IAAI,IAAI,CAACD,KAAK,IAAIT,kBAAkB,CAACU,IAAI,CAAC,EAAE;AAC9CO,IAAAA,SAAS,GAAGjB,kBAAkB,CAACU,IAAI,CAAC;AACtC;EAEA,IAAIA,IAAI,KAAK,OAAO,EAAE;AACpB,IAAA,IAAIO,SAAS,KAAKjB,kBAAkB,CAACC,KAAK,EAAE;AAC1CgB,MAAAA,SAAS,GAAGC,gBAAgB,CAACZ,OAAO,CAAC;AACvC;AACAS,IAAAA,MAAM,CAACI,MAAM,CAAC,EAAE,EAAEb,OAAO,EAAE;AAAEG,MAAAA,KAAK,EAAEQ;AAAU,KAAC,CAAC;AAClD;EAEA,IACE,CAACG,SAAS,CAACf,KAAK,EAAE,OAAO,CAAC,IACzBY,SAAS,IAAIH,OAAO,CAAET,KAAK,CAAYgB,KAAK,CAACJ,SAAS,CAAC,CAAC,KAAKN,OAAQ,EACtE;AACA,IAAA,OAAOW,eAAe,CACpBZ,IAAI,IAAI,SAAS,EACjBL,KAAK,EACLU,MAAM,CAACI,MAAM,CAAC,EAAE,EAAEb,OAAO,EAAE;AAAEG,MAAAA,KAAK,EAAEQ;AAAU,KAAC,CACjD,CAAC;AACH;AAEA,EAAA,OAAO,IAAI;AACb;AAEA,SAASC,gBAAgBA,CAACZ,OAAsB,EAAU;EACxD,IAAI;AAAEiB,IAAAA;GAAQ,GAAGvB,kBAAkB,CAACC,KAAK;EACzC,MAAM;IAAEuB,WAAW;AAAEC,IAAAA;AAAa,GAAC,GAAGnB,OAAO;EAE7C,IAAI,CAACoB,MAAM,CAACD,YAAY,CAAC,IAAI,OAAOA,YAAY,KAAK,QAAQ,EAAE;IAC7DF,MAAM,GAAGA,MAAM,CAACI,OAAO,CACrB,kCAAkC,EAClC,CAAA,SAAA,EAAYF,YAAY,CAAA,0BAAA,CAC1B,CAAC;AACH;AAEA,EAAA,IAAID,WAAW,EAAE;IACfD,MAAM,GAAGA,MAAM,CAACI,OAAO,CACrB,yCAAyC,EACzC,0CACF,CAAC;AACH;AAEA,EAAA,OAAO,IAAIC,MAAM,CAACL,MAAM,EAAE,GAAG,CAAC;AAChC;;;;"}