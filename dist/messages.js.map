{"version":3,"file":"messages.js","sources":["../src/messages.ts"],"sourcesContent":["import { get } from '@ember/object';\nimport { isNone } from '@ember/utils';\n\n/**\n *  @class Messages\n *  @module Validators\n */\nexport default {\n  /**\n   * Regex for matching error message placeholders\n   * @private\n   * @property _regex\n   * @type {RegExp}\n   */\n  _regex: /\\{(\\w+)\\}/g,\n\n  /**\n   * Default attribute description if one isnt passed into a validator's options\n   * @property defaultDescription\n   * @type {String}\n   */\n  defaultDescription: 'This field',\n\n  /**\n   * Get a description for a specific attribute. This is a hook\n   * for i18n solutions to retrieve attribute descriptions from a translation\n   * @method getDescriptionFor\n   * @param  {String} attribute\n   * @param  {Object} options\n   * @return {String}\n   */\n  getDescriptionFor(\n    attribute: string,\n    context: { description?: string } = {},\n  ): string {\n    return context.description || this.defaultDescription;\n  },\n\n  /**\n   * Get a message with a given type\n   * @method getMessageFor\n   * @param  {String} type\n   * @param  {Object} context\n   * @return {String}\n   */\n  getMessageFor(type: string, context = {}) {\n    return this.formatMessage(get(this, type) as string, context);\n  },\n\n  /**\n   * Regex replace all placeholders with their given context\n   * @method formatMessage\n   * @param  {String} message\n   * @param  {Object} context\n   * @return {String}\n   */\n  formatMessage(\n    message: string,\n    context: Record<string, unknown> = {},\n  ): string {\n    let m = message;\n\n    if (isNone(m) || typeof m !== 'string') {\n      m = this.invalid;\n    }\n\n    return m.replace(\n      this._regex,\n      (s: string, attr: string) => get(context, attr) as string,\n    );\n  },\n\n  /**\n   * Default validation error message strings\n   */\n  accepted: '{description} must be accepted',\n  after: '{description} must be after {after}',\n  before: '{description} must be before {before}',\n  blank: \"{description} can't be blank\",\n  collection: '{description} must be a collection',\n  confirmation: \"{description} doesn't match {on}\",\n  date: '{description} must be a valid date',\n  email: '{description} must be a valid email address',\n  empty: \"{description} can't be empty\",\n  equalTo: '{description} must be equal to {is}',\n  even: '{description} must be even',\n  exclusion: '{description} is reserved',\n  greaterThan: '{description} must be greater than {gt}',\n  greaterThanOrEqualTo: '{description} must be greater than or equal to {gte}',\n  inclusion: '{description} is not included in the list',\n  invalid: '{description} is invalid',\n  lessThan: '{description} must be less than {lt}',\n  lessThanOrEqualTo: '{description} must be less than or equal to {lte}',\n  notAnInteger: '{description} must be an integer',\n  notANumber: '{description} must be a number',\n  odd: '{description} must be odd',\n  onOrAfter: '{description} must be on or after {onOrAfter}',\n  onOrBefore: '{description} must be on or before {onOrBefore}',\n  otherThan: '{description} must be other than {value}',\n  phone: '{description} must be a valid phone number',\n  positive: '{description} must be positive',\n  multipleOf: '{description} must be a multiple of {multipleOf}',\n  present: '{description} must be blank',\n  singular: \"{description} can't be a collection\",\n  tooLong: '{description} is too long (maximum is {max} characters)',\n  tooShort: '{description} is too short (minimum is {min} characters)',\n  between: '{description} must be between {min} and {max} characters',\n  url: '{description} must be a valid url',\n  wrongLength: '{description} is the wrong length (should be {is} characters)',\n};\n"],"names":["_regex","defaultDescription","getDescriptionFor","attribute","context","description","getMessageFor","type","formatMessage","get","message","m","isNone","invalid","replace","s","attr","accepted","after","before","blank","collection","confirmation","date","email","empty","equalTo","even","exclusion","greaterThan","greaterThanOrEqualTo","inclusion","lessThan","lessThanOrEqualTo","notAnInteger","notANumber","odd","onOrAfter","onOrBefore","otherThan","phone","positive","multipleOf","present","singular","tooLong","tooShort","between","url","wrongLength"],"mappings":";;;AAGA;AACA;AACA;AACA;AACA,eAAe;AACb;AACF;AACA;AACA;AACA;AACA;AACEA,EAAAA,MAAM,EAAE,YAAY;AAEpB;AACF;AACA;AACA;AACA;AACEC,EAAAA,kBAAkB,EAAE,YAAY;AAEhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,iBAAiBA,CACfC,SAAiB,EACjBC,OAAiC,GAAG,EAAE,EAC9B;AACR,IAAA,OAAOA,OAAO,CAACC,WAAW,IAAI,IAAI,CAACJ,kBAAkB;GACtD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACEK,EAAAA,aAAaA,CAACC,IAAY,EAAEH,OAAO,GAAG,EAAE,EAAE;AACxC,IAAA,OAAO,IAAI,CAACI,aAAa,CAACC,GAAG,CAAC,IAAI,EAAEF,IAAI,CAAC,EAAYH,OAAO,CAAC;GAC9D;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACEI,EAAAA,aAAaA,CACXE,OAAe,EACfN,OAAgC,GAAG,EAAE,EAC7B;IACR,IAAIO,CAAC,GAAGD,OAAO;IAEf,IAAIE,MAAM,CAACD,CAAC,CAAC,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;MACtCA,CAAC,GAAG,IAAI,CAACE,OAAO;AAClB;AAEA,IAAA,OAAOF,CAAC,CAACG,OAAO,CACd,IAAI,CAACd,MAAM,EACX,CAACe,CAAS,EAAEC,IAAY,KAAKP,GAAG,CAACL,OAAO,EAAEY,IAAI,CAChD,CAAC;GACF;AAED;AACF;AACA;AACEC,EAAAA,QAAQ,EAAE,gCAAgC;AAC1CC,EAAAA,KAAK,EAAE,qCAAqC;AAC5CC,EAAAA,MAAM,EAAE,uCAAuC;AAC/CC,EAAAA,KAAK,EAAE,8BAA8B;AACrCC,EAAAA,UAAU,EAAE,oCAAoC;AAChDC,EAAAA,YAAY,EAAE,kCAAkC;AAChDC,EAAAA,IAAI,EAAE,oCAAoC;AAC1CC,EAAAA,KAAK,EAAE,6CAA6C;AACpDC,EAAAA,KAAK,EAAE,8BAA8B;AACrCC,EAAAA,OAAO,EAAE,qCAAqC;AAC9CC,EAAAA,IAAI,EAAE,4BAA4B;AAClCC,EAAAA,SAAS,EAAE,2BAA2B;AACtCC,EAAAA,WAAW,EAAE,yCAAyC;AACtDC,EAAAA,oBAAoB,EAAE,sDAAsD;AAC5EC,EAAAA,SAAS,EAAE,2CAA2C;AACtDlB,EAAAA,OAAO,EAAE,0BAA0B;AACnCmB,EAAAA,QAAQ,EAAE,sCAAsC;AAChDC,EAAAA,iBAAiB,EAAE,mDAAmD;AACtEC,EAAAA,YAAY,EAAE,kCAAkC;AAChDC,EAAAA,UAAU,EAAE,gCAAgC;AAC5CC,EAAAA,GAAG,EAAE,2BAA2B;AAChCC,EAAAA,SAAS,EAAE,+CAA+C;AAC1DC,EAAAA,UAAU,EAAE,iDAAiD;AAC7DC,EAAAA,SAAS,EAAE,0CAA0C;AACrDC,EAAAA,KAAK,EAAE,4CAA4C;AACnDC,EAAAA,QAAQ,EAAE,gCAAgC;AAC1CC,EAAAA,UAAU,EAAE,kDAAkD;AAC9DC,EAAAA,OAAO,EAAE,6BAA6B;AACtCC,EAAAA,QAAQ,EAAE,qCAAqC;AAC/CC,EAAAA,OAAO,EAAE,yDAAyD;AAClEC,EAAAA,QAAQ,EAAE,0DAA0D;AACpEC,EAAAA,OAAO,EAAE,0DAA0D;AACnEC,EAAAA,GAAG,EAAE,mCAAmC;AACxCC,EAAAA,WAAW,EAAE;AACf,CAAC;;;;"}