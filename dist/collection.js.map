{"version":3,"file":"collection.js","sources":["../src/collection.ts"],"sourcesContent":["import { assert } from '@ember/debug';\nimport { isArray } from '@ember/array';\nimport { isPresent } from '@ember/utils';\nimport validationError, {\n  type IValidationError,\n} from './utils/validation-error.ts';\n\ninterface IOptions {\n  collection: boolean;\n}\n\n/**\n *  @class Collection\n *  @module Validators\n */\n\n/**\n * @method validate\n * @param {Any} value\n * @param {Object} options\n * @param {Boolean} options.collection\n * @param {Object} model\n * @param {String} attribute\n */\nexport default function validateCollection(\n  value: unknown,\n  options: IOptions,\n  _model: object,\n  attribute: string,\n): true | IValidationError<unknown, IOptions> {\n  const collection = options.collection;\n\n  assert(\n    `[validator:collection] [${attribute}] option 'collection' is required`,\n    isPresent(collection),\n  );\n\n  if (collection === true && !isArray(value)) {\n    return validationError('collection', value, options);\n  }\n\n  if (collection === false && isArray(value)) {\n    return validationError('singular', value, options);\n  }\n\n  return true;\n}\n"],"names":["validateCollection","value","options","_model","attribute","collection","assert","isPresent","isArray","validationError"],"mappings":";;;;;AAWA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,kBAAkBA,CACxCC,KAAc,EACdC,OAAiB,EACjBC,MAAc,EACdC,SAAiB,EAC2B;AAC5C,EAAA,MAAMC,UAAU,GAAGH,OAAO,CAACG,UAAU;EAErCC,MAAM,CACJ,2BAA2BF,SAAS,CAAA,iCAAA,CAAmC,EACvEG,SAAS,CAACF,UAAU,CACtB,CAAC;EAED,IAAIA,UAAU,KAAK,IAAI,IAAI,CAACG,OAAO,CAACP,KAAK,CAAC,EAAE;AAC1C,IAAA,OAAOQ,eAAe,CAAC,YAAY,EAAER,KAAK,EAAEC,OAAO,CAAC;AACtD;EAEA,IAAIG,UAAU,KAAK,KAAK,IAAIG,OAAO,CAACP,KAAK,CAAC,EAAE;AAC1C,IAAA,OAAOQ,eAAe,CAAC,UAAU,EAAER,KAAK,EAAEC,OAAO,CAAC;AACpD;AAEA,EAAA,OAAO,IAAI;AACb;;;;"}